/*
 * Login: xturyt00
 */


/* 
 *    At the beginning I want to describe properties that I used
 *    so then I could stress on something that was really interesting,
 *    without writing tons of comments on each section.
 *
 *    Properties:
 *    width - width of the element
 *    height - height of the element
 *    font-family - text fonts
 *    color - text color
 *    margin - indent outside
 *    padding - indent inside
 *    box-sizing - if I say with: 300px and padding 10px, the with will still be 300px [border-box]
 *    background-size - The size of the image in the background
 *    background-repeat - if the original image is too big it will repeat it self
 *    background-position - The position of the images that will be kept
 *    display - the way that the element displays itself on the screen
 *    justify-content - aligns items by X (flex)
 *    align-items - aligns items by Y (flex)
 *    justify-self - aligns items by X (grid)
 *    transition - defines time of animation or change of a state
 *
 *    Pseudo-elements:
 *    tag::after - creates element after tag
 *    tag::before - creates element before tag
 */


/* 
 *    Global styling & Styling the elements that repeat.
 */

:root {
    --blue: steelblue;
    --lightGray: #898989;
    --gray: #bfbfbf;
    --darkGray: #4d4d4d;
    --white: #f7f7f7;
}

body,
input,
textarea {
    font-family: 'PT Sans';
}

* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

a {
    text-decoration: none;
}

.content {
    max-width: 1200px;
    min-width: 768px;
    padding: 0 20px;
    margin: 0 auto;
}

h2 {
    font-size: 32px;
}

.content>h2 {
    font-size: 40px;
}

h3 {
    font-size: 24px;
}

p {
    line-height: 1.7em;
    font-size: 14px;
}

section {
    padding: 60px 0 80px;
}


/* 
 *    Selecting section's titles that repeat its style
 */

section:nth-child(2n+1):not(#stats):not(#price) h2 {
    text-align: center;
    text-transform: uppercase;
    padding-bottom: 30px;
}


/* 
 *    Header.
 *
 *    Like in most sections I decided to use display flex or grid,
 *    because of tricky structure of HTML (for inst. in header content)
 *
 *    Due to Flex I could easily make a row of elements
 *    And If I needed a row with special element's positioning without changing HTML - I used Grid.
 */

#header {
    min-height: 400px;
    background-image: url('../img/header.jpg');
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
    height: 100vh;
}

#header .content,
#footer .content {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

#header .content {
    align-items: stretch;
    flex-direction: column;
    height: 100%;
}

#header-menu {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    margin-top: 10px;
    padding-top: 5px;
}

#header-menu i {
    color: var(--blue);
    padding-right: 5px;
}

#logo {
    font-size: 25px;
    font-family: 'Special Elite';
}

#logo a {
    color: var(--blue);
}

#logo a:hover {
    color: white;
}


/* networks & contacts */

#networks {
    font-size: 25px;
    grid-column: 2;
    grid-row: 2;
}

#networks i:hover {
    color: white;
}

#contacts a {
    color: var(--lightGray);
}

#mail a:hover {
    color: white;
}

#networks,
#contacts {
    text-align: right;
    color: var(--lightGray);
}

#contacts span:first-child {
    padding-right: 10px;
}


/* navigation */

#navigation {
    margin-top: 15px;
    letter-spacing: .05em;
    grid-column: 1;
    grid-row: 2;
    text-transform: uppercase;
}

#navigation ul {
    display: flex;
    align-items: center;
    list-style: none;
}

#navigation li {
    border: 1px solid transparent;
    padding: 5px 15px;
    transition: .5s;
}

#navigation li:hover {
    border: 1px solid var(--gray);
}

#navigation a {
    color: var(--gray);
    font-size: 13px;
}


/* 
 *    Header title & button.
 *
 *    Here i'm not sure about 2/3 height and my way of doing it with 66%
 *    I assume there is a more proper way for it. But it looks fine I guess.
 *
 *    Here I also used flex-direction that changes x and y to make a column
 */

#header-title {
    display: flex;
    justify-content: center;
    align-items: flex-start;
    flex-direction: column;
    color: white;
    margin: 0 0 20px 20px;
    height: 66%;
}

#header-title h1 {
    font-size: 64px;
}

#get-started {
    margin-top: 40px;
    padding: 20px;
    border-radius: 15px;
    border: 2px solid var(--darkGray);
    transition: .5s;
}

#get-started:hover {
    background-color: var(--blue);
    border: 2px solid var(--blue);
}

#get-started:hover a {
    color: white;
}

#get-started a {
    color: var(--lightGray);
}


/* 
 *    Services.
 *
 *    Here I used nth-child selector to select odd cells in grid 
 *    and move them to the right.
 */

#services .content>p {
    text-align: center;
    color: var(--lightGray);
}

#services .content>div {
    display: grid;
    grid-gap: 40px;
    grid-template-columns: repeat(2, 1fr);
    margin-top: 40px;
}

.services-column {
    width: 300px;
    text-align: center;
    box-shadow: 0 0 10px var(--gray);
    border-radius: 5px;
    transition: .5s;
}

.services-card p {
    color: var(--gray);
    padding: 5px 0;
}

.services-card {
    padding: 10px;
}

.services-column:nth-child(2n+1) {
    justify-self: end;
}

.services-column img {
    border-radius: 5px;
    padding: 5px;
    height: 50px;
    width: 50px;
    border: 1px solid var(--blue);
    margin: 10px 0 20px;
}

.services-column:hover {
    box-shadow: 0 0 10px var(--blue);
}

.services-column:hover h3 {
    color: var(--blue);
}

.services-column:hover img:last-child {
    display: inline;
    background-color: var(--blue);
}

.services-column:hover img:first-child {
    display: none;
}

.services-column img:last-child {
    display: none;
}


/* 
 *    About.
 *
 *    In this section I used float for images, so my text could stucture itself 
 *    around the image.
 */

#about {
    background-color: var(--white);
}

#about p {
    color: var(--lightGray);
}

.about-item:nth-child(2n+1) img {
    float: left;
    margin: 0 80px 40px 0;
}

.about-item:nth-child(2n) img {
    float: right;
    margin: 80px 0 40px 80px;
}

.about-item p {
    padding-top: 40px;
    text-align: justify;
}

.about-item:not(:first-child) h2 {
    margin-top: 110px;
}

.about-item img {
    display: block;
    width: 40%;
    transition: .5s;
    border-radius: 5px;
}

.about-item img:hover {
    width: 50%;
}


/* 
 *    Team.
 *
 *    In here I used positioning (relative & absolute) to stick out an icon inside the card
 *    on top of it by 50%. [ (font-size + padding) / 2 ]
 */

#team .content {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-gap: 20px;
}

#team h2 {
    grid-column-start: 1;
    grid-column-end: 5;
}

.team-card img {
    width: 100%;
    border-radius: 5px 5px 0 0;
}

.team-card {
    border-radius: 5px;
    box-shadow: 0 0 10px var(--gray);
    text-align: center;
    transition: .5s;
}

.team-card h3 {
    padding: 30px 0 10px;
}

.team-card:hover {
    box-shadow: 0 0 10px var(--blue);
}

.team-card:hover h3 {
    color: var(--blue);
}

.team-card p {
    padding: 5px 10px 10px 10px;
    color: var(--gray);
}

.team-card h4 {
    color: var(--lightGray);
}

#stats {
    border-top: 1px dashed black;
}

#stats .content {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(3, 1fr);
}

.stats-card {
    max-width: 300;
    margin: auto;
    background-color: var(--darkGray);
    text-align: center;
    width: 80%;
    border-radius: 5px;
    position: relative;
    padding: 40px 0 15px;
    color: white;
    transition: .5s;
}

.stats-card:hover {
    background-color: var(--blue);
}

.stats-card p {
    color: var(--gray);
    margin-top: 10px;
}

.stats-card i {
    position: absolute;
    top: -20px;
    right: 50%;
    transform: translateX(50%);
    font-size: 32px;
    background-color: #fff;
    padding: 8px;
    border-radius: 50%;
    color: var(--blue);
}


/* 
 *    Price.
 */

#price {
    background-color: var(--white);
}

#price h2 {
    text-align: center;
    margin-bottom: 60px;
}

#price thead th {
    padding: 0 0 20px 20px;
}

#price table {
    margin: 0 auto;
    width: 80%;
    text-align: left;
    border-collapse: separate;
    border-spacing: 0 20px;
}

#price tr {
    transition: .5s;
}

#price tbody tr:hover {
    background-color: white;
    color: var(--blue);
}

#price tbody tr:hover td {
    color: var(--blue);
}

#price td {
    color: var(--lightGray);
    padding: 20px;
    border-top: 1px dashed var(--blue);
    border-bottom: 1px dashed var(--blue);
}

#price button {
    padding: 20px;
    border: 1px solid var(--blue);
    background: transparent;
    border-radius: 5px;
    transition: .5s;
}

#price button:hover {
    background-color: var(--blue);
    color: white;
}

#price tbody li {
    padding: 2px 0;
}

#price tbody li:first-child {
    list-style-type: none;
    font-weight: 600;
}


/* 
 *    Refs.
 *    
 *    Main problem here were triangles and double parentheses.
 *    I didn't see the parentheses at first, but It clicked after a few minutes.
 *
 *    The triangle. Well, the idea is to make thick borders in a rectangle,
 *    then I need to remove background. There will be left 4 triangles, that point in
 *    different direction and All I need is to remove all except the right one that I need.
 *
 *    On this webpage very good demo with it: https://css-tricks.com/snippets/css/css-triangle/
 */

#refs {
    border-bottom: 1px dashed black;
}

#refs .content {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
}

.refs-card {
    max-width: 400px;
    display: block;
    transition: .5s;
}

.refs-card blockquote {
    background-color: var(--darkGray);
    border-radius: 5px;
    color: white;
    position: relative;
    padding: 20px 40px;
    font-size: 18px;
    margin-bottom: 35px;
}

.refs-card blockquote::before {
    content: '\"';
    font-style: italic;
    font-size: 85px;
    color: var(--blue);
    position: absolute;
    left: 2px;
    top: 55px;
    line-height: 0;
}

.refs-card blockquote::after {
    content: '';
    position: absolute;
    border-right: 20px solid transparent;
    border-top: 20px solid var(--darkGray);
    bottom: -20px;
    left: 30px;
}

.refs-card:hover blockquote {
    background-color: var(--blue);
}

.refs-card:hover blockquote::after {
    border-top: 20px solid var(--blue);
}

.refs-card:hover blockquote::before {
    color: white;
}

.refs-card:hover figure h3 {
    color: var(--blue);
}

#refs figure img {
    height: 60px;
    width: 60px;
    border-radius: 50%;
}

.refs-card figure h3 {
    font-size: 18px;
    font-weight: normal;
    padding-left: 20px;
    color: var(--lightGray);
}

#refs figure {
    display: flex;
    align-items: center;
}


/* 
 *    Contact.
 */

#contact .content {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(2, 1fr);
}

#contact h2 {
    grid-column-start: 1;
    grid-column-end: 3;
}

#map {
    height: 400px;
}

#contact form {
    padding: 20px 0;
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(2, 1fr);
}

#contact input,
#contact textarea {
    padding: 10px;
    color: var(--blue);
    border: 1px solid var(--blue);
    border-radius: 5px;
}

#contact input:last-child {
    background-color: var(--blue);
    color: white;
    grid-column-start: 1;
    grid-column-end: 3;
    width: 50%;
    margin: 0 auto;
    transition: .5s;
    border: none;
}

#contact input:last-child:hover {
    background-color: green;
}

#contact input:invalid,
#contact textarea:invalid {
    color: red;
}

#contact input::placeholder,
#contact textarea::placeholder {
    color: var(--lightGray);
}

#contact-subject {
    grid-column-start: 1;
    grid-column-end: 3;
}

#contact-message {
    grid-column-start: 1;
    grid-column-end: 3;
}


/* 
 *    Footer.
 */

#footer {
    background-color: black;
    padding: 40px 0;
}

#footer span:first-child {
    color: var(--lightGray);
    font-size: 14px;
}

#footer span:last-child a {
    color: var(--blue);
}